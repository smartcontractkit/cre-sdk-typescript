// @generated by protoc-gen-es v2.6.3 with parameter "target=ts,import_extension=none,json_types=true,keep_empty_files=false"
// @generated from file capabilities/blockchain/evm/v1alpha/client.proto (package capabilities.blockchain.evm.v1alpha, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty } from "@bufbuild/protobuf/wkt";
import type { ReportResponse, ReportResponseJson } from "../../../../sdk/v1alpha/sdk_pb";
import { file_sdk_v1alpha_sdk } from "../../../../sdk/v1alpha/sdk_pb";
import { file_tools_generator_v1alpha_cre_metadata } from "../../../../tools/generator/v1alpha/cre_metadata_pb";
import type { BigInt, BigIntJson } from "../../../../values/v1/values_pb";
import { file_values_v1_values } from "../../../../values/v1/values_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file capabilities/blockchain/evm/v1alpha/client.proto.
 */
export const file_capabilities_blockchain_evm_v1alpha_client: GenFile = /*@__PURE__*/
  fileDesc("CjBjYXBhYmlsaXRpZXMvYmxvY2tjaGFpbi9ldm0vdjFhbHBoYS9jbGllbnQucHJvdG8SI2NhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhIh0KC1RvcGljVmFsdWVzEg4KBnZhbHVlcxgBIAMoDCK4AQoXRmlsdGVyTG9nVHJpZ2dlclJlcXVlc3QSEQoJYWRkcmVzc2VzGAEgAygMEkAKBnRvcGljcxgCIAMoCzIwLmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLlRvcGljVmFsdWVzEkgKCmNvbmZpZGVuY2UYAyABKA4yNC5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5Db25maWRlbmNlTGV2ZWwiegoTQ2FsbENvbnRyYWN0UmVxdWVzdBI6CgRjYWxsGAEgASgLMiwuY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuQ2FsbE1zZxInCgxibG9ja19udW1iZXIYAiABKAsyES52YWx1ZXMudjEuQmlnSW50IiEKEUNhbGxDb250cmFjdFJlcGx5EgwKBGRhdGEYASABKAwiWwoRRmlsdGVyTG9nc1JlcXVlc3QSRgoMZmlsdGVyX3F1ZXJ5GAEgASgLMjAuY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuRmlsdGVyUXVlcnkiSQoPRmlsdGVyTG9nc1JlcGx5EjYKBGxvZ3MYASADKAsyKC5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5Mb2cixwEKA0xvZxIPCgdhZGRyZXNzGAEgASgMEg4KBnRvcGljcxgCIAMoDBIPCgd0eF9oYXNoGAMgASgMEhIKCmJsb2NrX2hhc2gYBCABKAwSDAoEZGF0YRgFIAEoDBIRCglldmVudF9zaWcYBiABKAwSJwoMYmxvY2tfbnVtYmVyGAcgASgLMhEudmFsdWVzLnYxLkJpZ0ludBIQCgh0eF9pbmRleBgIIAEoDRINCgVpbmRleBgJIAEoDRIPCgdyZW1vdmVkGAogASgIIjEKB0NhbGxNc2cSDAoEZnJvbRgBIAEoDBIKCgJ0bxgCIAEoDBIMCgRkYXRhGAMgASgMIr0BCgtGaWx0ZXJRdWVyeRISCgpibG9ja19oYXNoGAEgASgMEiUKCmZyb21fYmxvY2sYAiABKAsyES52YWx1ZXMudjEuQmlnSW50EiMKCHRvX2Jsb2NrGAMgASgLMhEudmFsdWVzLnYxLkJpZ0ludBIRCglhZGRyZXNzZXMYBCADKAwSOwoGdG9waWNzGAUgAygLMisuY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuVG9waWNzIhcKBlRvcGljcxINCgV0b3BpYxgBIAMoDCJMChBCYWxhbmNlQXRSZXF1ZXN0Eg8KB2FjY291bnQYASABKAwSJwoMYmxvY2tfbnVtYmVyGAIgASgLMhEudmFsdWVzLnYxLkJpZ0ludCI0Cg5CYWxhbmNlQXRSZXBseRIiCgdiYWxhbmNlGAEgASgLMhEudmFsdWVzLnYxLkJpZ0ludCJPChJFc3RpbWF0ZUdhc1JlcXVlc3QSOQoDbXNnGAEgASgLMiwuY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuQ2FsbE1zZyIjChBFc3RpbWF0ZUdhc1JlcGx5Eg8KA2dhcxgBIAEoBEICMAEiKwobR2V0VHJhbnNhY3Rpb25CeUhhc2hSZXF1ZXN0EgwKBGhhc2gYASABKAwiYgoZR2V0VHJhbnNhY3Rpb25CeUhhc2hSZXBseRJFCgt0cmFuc2FjdGlvbhgBIAEoCzIwLmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLlRyYW5zYWN0aW9uIqEBCgtUcmFuc2FjdGlvbhIRCgVub25jZRgBIAEoBEICMAESDwoDZ2FzGAIgASgEQgIwARIKCgJ0bxgDIAEoDBIMCgRkYXRhGAQgASgMEgwKBGhhc2gYBSABKAwSIAoFdmFsdWUYBiABKAsyES52YWx1ZXMudjEuQmlnSW50EiQKCWdhc19wcmljZRgHIAEoCzIRLnZhbHVlcy52MS5CaWdJbnQiLAocR2V0VHJhbnNhY3Rpb25SZWNlaXB0UmVxdWVzdBIMCgRoYXNoGAEgASgMIlsKGkdldFRyYW5zYWN0aW9uUmVjZWlwdFJlcGx5Ej0KB3JlY2VpcHQYASABKAsyLC5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5SZWNlaXB0IpkCCgdSZWNlaXB0EhIKBnN0YXR1cxgBIAEoBEICMAESFAoIZ2FzX3VzZWQYAiABKARCAjABEhQKCHR4X2luZGV4GAMgASgEQgIwARISCgpibG9ja19oYXNoGAQgASgMEjYKBGxvZ3MYBiADKAsyKC5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5Mb2cSDwoHdHhfaGFzaBgHIAEoDBIuChNlZmZlY3RpdmVfZ2FzX3ByaWNlGAggASgLMhEudmFsdWVzLnYxLkJpZ0ludBInCgxibG9ja19udW1iZXIYCSABKAsyES52YWx1ZXMudjEuQmlnSW50EhgKEGNvbnRyYWN0X2FkZHJlc3MYCiABKAwiQAoVSGVhZGVyQnlOdW1iZXJSZXF1ZXN0EicKDGJsb2NrX251bWJlchgBIAEoCzIRLnZhbHVlcy52MS5CaWdJbnQiUgoTSGVhZGVyQnlOdW1iZXJSZXBseRI7CgZoZWFkZXIYASABKAsyKy5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5IZWFkZXIiawoGSGVhZGVyEhUKCXRpbWVzdGFtcBgBIAEoBEICMAESJwoMYmxvY2tfbnVtYmVyGAIgASgLMhEudmFsdWVzLnYxLkJpZ0ludBIMCgRoYXNoGAMgASgMEhMKC3BhcmVudF9oYXNoGAQgASgMIlsKGlJlZ2lzdGVyTG9nVHJhY2tpbmdSZXF1ZXN0Ej0KBmZpbHRlchgBIAEoCzItLmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLkxQRmlsdGVyIsIBCghMUEZpbHRlchIZCg1tYXhfbG9nc19rZXB0GAEgASgEQgIwARIaCg5yZXRlbnRpb25fdGltZRgCIAEoA0ICMAESGgoObG9nc19wZXJfYmxvY2sYAyABKARCAjABEgwKBG5hbWUYBCABKAkSEQoJYWRkcmVzc2VzGAUgAygMEhIKCmV2ZW50X3NpZ3MYBiADKAwSDgoGdG9waWMyGAcgAygMEg4KBnRvcGljMxgIIAMoDBIOCgZ0b3BpYzQYCSADKAwiMwocVW5yZWdpc3RlckxvZ1RyYWNraW5nUmVxdWVzdBITCgtmaWx0ZXJfbmFtZRgBIAEoCSKrAQoSV3JpdGVSZXBvcnRSZXF1ZXN0EhAKCHJlY2VpdmVyGAEgASgMEisKBnJlcG9ydBgCIAEoCzIbLnNkay52MWFscGhhLlJlcG9ydFJlc3BvbnNlEkcKCmdhc19jb25maWcYAyABKAsyLi5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5HYXNDb25maWdIAIgBAUINCgtfZ2FzX2NvbmZpZyIiCglHYXNDb25maWcSFQoJZ2FzX2xpbWl0GAEgASgEQgIwASKHAwoQV3JpdGVSZXBvcnRSZXBseRJACgl0eF9zdGF0dXMYASABKA4yLS5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5UeFN0YXR1cxJ1CiJyZWNlaXZlcl9jb250cmFjdF9leGVjdXRpb25fc3RhdHVzGAIgASgOMkQuY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuUmVjZWl2ZXJDb250cmFjdEV4ZWN1dGlvblN0YXR1c0gAiAEBEhQKB3R4X2hhc2gYAyABKAxIAYgBARIvCg90cmFuc2FjdGlvbl9mZWUYBCABKAsyES52YWx1ZXMudjEuQmlnSW50SAKIAQESGgoNZXJyb3JfbWVzc2FnZRgFIAEoCUgDiAEBQiUKI19yZWNlaXZlcl9jb250cmFjdF9leGVjdXRpb25fc3RhdHVzQgoKCF90eF9oYXNoQhIKEF90cmFuc2FjdGlvbl9mZWVCEAoOX2Vycm9yX21lc3NhZ2UqaQoPQ29uZmlkZW5jZUxldmVsEhkKFUNPTkZJREVOQ0VfTEVWRUxfU0FGRRAAEhsKF0NPTkZJREVOQ0VfTEVWRUxfTEFURVNUEAESHgoaQ09ORklERU5DRV9MRVZFTF9GSU5BTElaRUQQAiqCAQofUmVjZWl2ZXJDb250cmFjdEV4ZWN1dGlvblN0YXR1cxIuCipSRUNFSVZFUl9DT05UUkFDVF9FWEVDVVRJT05fU1RBVFVTX1NVQ0NFU1MQABIvCitSRUNFSVZFUl9DT05UUkFDVF9FWEVDVVRJT05fU1RBVFVTX1JFVkVSVEVEEAEqTgoIVHhTdGF0dXMSEwoPVFhfU1RBVFVTX0ZBVEFMEAASFgoSVFhfU1RBVFVTX1JFVkVSVEVEEAESFQoRVFhfU1RBVFVTX1NVQ0NFU1MQAjLXDwoGQ2xpZW50EoABCgxDYWxsQ29udHJhY3QSOC5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5DYWxsQ29udHJhY3RSZXF1ZXN0GjYuY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuQ2FsbENvbnRyYWN0UmVwbHkSegoKRmlsdGVyTG9ncxI2LmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLkZpbHRlckxvZ3NSZXF1ZXN0GjQuY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuRmlsdGVyTG9nc1JlcGx5EncKCUJhbGFuY2VBdBI1LmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLkJhbGFuY2VBdFJlcXVlc3QaMy5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5CYWxhbmNlQXRSZXBseRJ9CgtFc3RpbWF0ZUdhcxI3LmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLkVzdGltYXRlR2FzUmVxdWVzdBo1LmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLkVzdGltYXRlR2FzUmVwbHkSmAEKFEdldFRyYW5zYWN0aW9uQnlIYXNoEkAuY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuR2V0VHJhbnNhY3Rpb25CeUhhc2hSZXF1ZXN0Gj4uY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuR2V0VHJhbnNhY3Rpb25CeUhhc2hSZXBseRKbAQoVR2V0VHJhbnNhY3Rpb25SZWNlaXB0EkEuY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuR2V0VHJhbnNhY3Rpb25SZWNlaXB0UmVxdWVzdBo/LmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLkdldFRyYW5zYWN0aW9uUmVjZWlwdFJlcGx5EoYBCg5IZWFkZXJCeU51bWJlchI6LmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLkhlYWRlckJ5TnVtYmVyUmVxdWVzdBo4LmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLkhlYWRlckJ5TnVtYmVyUmVwbHkSbgoTUmVnaXN0ZXJMb2dUcmFja2luZxI/LmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLlJlZ2lzdGVyTG9nVHJhY2tpbmdSZXF1ZXN0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5EnIKFVVucmVnaXN0ZXJMb2dUcmFja2luZxJBLmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLlVucmVnaXN0ZXJMb2dUcmFja2luZ1JlcXVlc3QaFi5nb29nbGUucHJvdG9idWYuRW1wdHkSdgoKTG9nVHJpZ2dlchI8LmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhLkZpbHRlckxvZ1RyaWdnZXJSZXF1ZXN0GiguY2FwYWJpbGl0aWVzLmJsb2NrY2hhaW4uZXZtLnYxYWxwaGEuTG9nMAESfQoLV3JpdGVSZXBvcnQSNy5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5Xcml0ZVJlcG9ydFJlcXVlc3QaNS5jYXBhYmlsaXRpZXMuYmxvY2tjaGFpbi5ldm0udjFhbHBoYS5Xcml0ZVJlcG9ydFJlcGx5GrgEgrUYswQIARIJZXZtQDEuMC4wGqMECg1DaGFpblNlbGVjdG9yEpEEEo4ECh0KEWF2YWxhbmNoZS1tYWlubmV0ENXnisDh1ZikWQojChZhdmFsYW5jaGUtdGVzdG5ldC1mdWppEJv5/JCi46j4zAEKLwojYmluYW5jZV9zbWFydF9jaGFpbi1tYWlubmV0LW9wYm5iLTEQia2P75PG17sGCjAKI2JpbmFuY2Vfc21hcnRfY2hhaW4tdGVzdG5ldC1vcGJuYi0xEI71hZHBg4+cuAEKHAoQZXRoZXJldW0tbWFpbm5ldBCV9vHkz7KmwkUKJwobZXRoZXJldW0tbWFpbm5ldC1hcmJpdHJ1bS0xEMTojc2Om6HXRAonChtldGhlcmV1bS1tYWlubmV0LW9wdGltaXNtLTEQuJWPw/f+0OkzCiUKGGV0aGVyZXVtLXRlc3RuZXQtc2Vwb2xpYRDZteTO/MnuoN4BCi8KI2V0aGVyZXVtLXRlc3RuZXQtc2Vwb2xpYS1hcmJpdHJ1bS0xEOrO7v/qtoSjMAosCh9ldGhlcmV1bS10ZXN0bmV0LXNlcG9saWEtYmFzZS0xELjKue/2kK7IjwEKLwojZXRoZXJldW0tdGVzdG5ldC1zZXBvbGlhLW9wdGltaXNtLTEQn4bFob7Yw8BIChsKD3BvbHlnb24tbWFpbm5ldBCxq+TwmpKGnTgKIQoUcG9seWdvbi10ZXN0bmV0LWFtb3kQzY/W3/HHkPrhAULlAQonY29tLmNhcGFiaWxpdGllcy5ibG9ja2NoYWluLmV2bS52MWFscGhhQgtDbGllbnRQcm90b1ABogIDQ0JFqgIjQ2FwYWJpbGl0aWVzLkJsb2NrY2hhaW4uRXZtLlYxYWxwaGHKAiNDYXBhYmlsaXRpZXNcQmxvY2tjaGFpblxFdm1cVjFhbHBoYeICL0NhcGFiaWxpdGllc1xCbG9ja2NoYWluXEV2bVxWMWFscGhhXEdQQk1ldGFkYXRh6gImQ2FwYWJpbGl0aWVzOjpCbG9ja2NoYWluOjpFdm06OlYxYWxwaGFiBnByb3RvMw", [file_google_protobuf_empty, file_sdk_v1alpha_sdk, file_tools_generator_v1alpha_cre_metadata, file_values_v1_values]);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.TopicValues
 */
export type TopicValues = Message<"capabilities.blockchain.evm.v1alpha.TopicValues"> & {
  /**
   * list of possible values for any topic, in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes values = 1;
   */
  values: Uint8Array[];
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.TopicValues
 */
export type TopicValuesJson = {
  /**
   * list of possible values for any topic, in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes values = 1;
   */
  values?: string[];
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.TopicValues.
 * Use `create(TopicValuesSchema)` to create a new message.
 */
export const TopicValuesSchema: GenMessage<TopicValues, {jsonType: TopicValuesJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 0);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.FilterLogTriggerRequest
 */
export type FilterLogTriggerRequest = Message<"capabilities.blockchain.evm.v1alpha.FilterLogTriggerRequest"> & {
  /**
   * list of addresses to include in evm address [20]byte fix-sized array format, at least one address is required
   *
   * @generated from field: repeated bytes addresses = 1;
   */
  addresses: Uint8Array[];

  /**
   *
   * TopicValues is a fixed 4 length array of possible values for any topic where:
   * a) the first element is an array of the event signatures (keccak256 of the event name and indexed args types), it has to have at least one value
   * b) the second element is an array of possible values for the first indexed argument, can be empty
   * c) the third element is an array of possible values for the second indexed argument, can be empty
   * d) the fourth element is an array of possible values for the third indexed argument, can be empty
   *
   * @generated from field: repeated capabilities.blockchain.evm.v1alpha.TopicValues topics = 2;
   */
  topics: TopicValues[];

  /**
   * optional, defaults to "SAFE"
   *
   * @generated from field: capabilities.blockchain.evm.v1alpha.ConfidenceLevel confidence = 3;
   */
  confidence: ConfidenceLevel;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.FilterLogTriggerRequest
 */
export type FilterLogTriggerRequestJson = {
  /**
   * list of addresses to include in evm address [20]byte fix-sized array format, at least one address is required
   *
   * @generated from field: repeated bytes addresses = 1;
   */
  addresses?: string[];

  /**
   *
   * TopicValues is a fixed 4 length array of possible values for any topic where:
   * a) the first element is an array of the event signatures (keccak256 of the event name and indexed args types), it has to have at least one value
   * b) the second element is an array of possible values for the first indexed argument, can be empty
   * c) the third element is an array of possible values for the second indexed argument, can be empty
   * d) the fourth element is an array of possible values for the third indexed argument, can be empty
   *
   * @generated from field: repeated capabilities.blockchain.evm.v1alpha.TopicValues topics = 2;
   */
  topics?: TopicValuesJson[];

  /**
   * optional, defaults to "SAFE"
   *
   * @generated from field: capabilities.blockchain.evm.v1alpha.ConfidenceLevel confidence = 3;
   */
  confidence?: ConfidenceLevelJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.FilterLogTriggerRequest.
 * Use `create(FilterLogTriggerRequestSchema)` to create a new message.
 */
export const FilterLogTriggerRequestSchema: GenMessage<FilterLogTriggerRequest, {jsonType: FilterLogTriggerRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 1);

/**
 * CallContractRequest has arguments for reading a contract as specified in the call message at a block height defined by blockNumber where:
 * blockNumber :
 * 	nil (default) or (-2) → use the latest mined block (“latest”)
 * 	FinalizedBlockNumber(-3) → last finalized block (“finalized”)
 *
 * Any positive value is treated as an explicit block height.
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.CallContractRequest
 */
export type CallContractRequest = Message<"capabilities.blockchain.evm.v1alpha.CallContractRequest"> & {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.CallMsg call = 1;
   */
  call?: CallMsg;

  /**
   * @generated from field: values.v1.BigInt block_number = 2;
   */
  blockNumber?: BigInt;
};

/**
 * CallContractRequest has arguments for reading a contract as specified in the call message at a block height defined by blockNumber where:
 * blockNumber :
 * 	nil (default) or (-2) → use the latest mined block (“latest”)
 * 	FinalizedBlockNumber(-3) → last finalized block (“finalized”)
 *
 * Any positive value is treated as an explicit block height.
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.CallContractRequest
 */
export type CallContractRequestJson = {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.CallMsg call = 1;
   */
  call?: CallMsgJson;

  /**
   * @generated from field: values.v1.BigInt block_number = 2;
   */
  blockNumber?: BigIntJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.CallContractRequest.
 * Use `create(CallContractRequestSchema)` to create a new message.
 */
export const CallContractRequestSchema: GenMessage<CallContractRequest, {jsonType: CallContractRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 2);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.CallContractReply
 */
export type CallContractReply = Message<"capabilities.blockchain.evm.v1alpha.CallContractReply"> & {
  /**
   * solidity-spec abi encoded bytes
   *
   * @generated from field: bytes data = 1;
   */
  data: Uint8Array;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.CallContractReply
 */
export type CallContractReplyJson = {
  /**
   * solidity-spec abi encoded bytes
   *
   * @generated from field: bytes data = 1;
   */
  data?: string;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.CallContractReply.
 * Use `create(CallContractReplySchema)` to create a new message.
 */
export const CallContractReplySchema: GenMessage<CallContractReply, {jsonType: CallContractReplyJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 3);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.FilterLogsRequest
 */
export type FilterLogsRequest = Message<"capabilities.blockchain.evm.v1alpha.FilterLogsRequest"> & {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.FilterQuery filter_query = 1;
   */
  filterQuery?: FilterQuery;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.FilterLogsRequest
 */
export type FilterLogsRequestJson = {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.FilterQuery filter_query = 1;
   */
  filterQuery?: FilterQueryJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.FilterLogsRequest.
 * Use `create(FilterLogsRequestSchema)` to create a new message.
 */
export const FilterLogsRequestSchema: GenMessage<FilterLogsRequest, {jsonType: FilterLogsRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 4);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.FilterLogsReply
 */
export type FilterLogsReply = Message<"capabilities.blockchain.evm.v1alpha.FilterLogsReply"> & {
  /**
   * @generated from field: repeated capabilities.blockchain.evm.v1alpha.Log logs = 1;
   */
  logs: Log[];
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.FilterLogsReply
 */
export type FilterLogsReplyJson = {
  /**
   * @generated from field: repeated capabilities.blockchain.evm.v1alpha.Log logs = 1;
   */
  logs?: LogJson[];
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.FilterLogsReply.
 * Use `create(FilterLogsReplySchema)` to create a new message.
 */
export const FilterLogsReplySchema: GenMessage<FilterLogsReply, {jsonType: FilterLogsReplyJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 5);

/**
 * represents evm-style log
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.Log
 */
export type Log = Message<"capabilities.blockchain.evm.v1alpha.Log"> & {
  /**
   * address of the contract emitted the log in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes address = 1;
   */
  address: Uint8Array;

  /**
   * indexed log fields, in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes topics = 2;
   */
  topics: Uint8Array[];

  /**
   * hash of the transaction containing the log, in [32]byte fix-sized array format
   *
   * @generated from field: bytes tx_hash = 3;
   */
  txHash: Uint8Array;

  /**
   * hash of the block containing the log, in [32]byte fix-sized array format
   *
   * @generated from field: bytes block_hash = 4;
   */
  blockHash: Uint8Array;

  /**
   * solidity-spec abi encoded log Data
   *
   * @generated from field: bytes data = 5;
   */
  data: Uint8Array;

  /**
   * keccak256 of event signature, in [32]byte fix-sized array format
   *
   * @generated from field: bytes event_sig = 6;
   */
  eventSig: Uint8Array;

  /**
   * block number containing the log
   *
   * @generated from field: values.v1.BigInt block_number = 7;
   */
  blockNumber?: BigInt;

  /**
   * index of transaction emmited the log
   *
   * @generated from field: uint32 tx_index = 8;
   */
  txIndex: number;

  /**
   * index of the Log within the intire block
   *
   * @generated from field: uint32 index = 9;
   */
  index: number;

  /**
   * flag if the log was removed during reorg
   *
   * @generated from field: bool removed = 10;
   */
  removed: boolean;
};

/**
 * represents evm-style log
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.Log
 */
export type LogJson = {
  /**
   * address of the contract emitted the log in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes address = 1;
   */
  address?: string;

  /**
   * indexed log fields, in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes topics = 2;
   */
  topics?: string[];

  /**
   * hash of the transaction containing the log, in [32]byte fix-sized array format
   *
   * @generated from field: bytes tx_hash = 3;
   */
  txHash?: string;

  /**
   * hash of the block containing the log, in [32]byte fix-sized array format
   *
   * @generated from field: bytes block_hash = 4;
   */
  blockHash?: string;

  /**
   * solidity-spec abi encoded log Data
   *
   * @generated from field: bytes data = 5;
   */
  data?: string;

  /**
   * keccak256 of event signature, in [32]byte fix-sized array format
   *
   * @generated from field: bytes event_sig = 6;
   */
  eventSig?: string;

  /**
   * block number containing the log
   *
   * @generated from field: values.v1.BigInt block_number = 7;
   */
  blockNumber?: BigIntJson;

  /**
   * index of transaction emmited the log
   *
   * @generated from field: uint32 tx_index = 8;
   */
  txIndex?: number;

  /**
   * index of the Log within the intire block
   *
   * @generated from field: uint32 index = 9;
   */
  index?: number;

  /**
   * flag if the log was removed during reorg
   *
   * @generated from field: bool removed = 10;
   */
  removed?: boolean;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.Log.
 * Use `create(LogSchema)` to create a new message.
 */
export const LogSchema: GenMessage<Log, {jsonType: LogJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 6);

/**
 * represents simplified evm-style CallMsg
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.CallMsg
 */
export type CallMsg = Message<"capabilities.blockchain.evm.v1alpha.CallMsg"> & {
  /**
   * sender address in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes from = 1;
   */
  from: Uint8Array;

  /**
   * contract address in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes to = 2;
   */
  to: Uint8Array;

  /**
   * solidity-spec abi encoded bytes
   *
   * @generated from field: bytes data = 3;
   */
  data: Uint8Array;
};

/**
 * represents simplified evm-style CallMsg
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.CallMsg
 */
export type CallMsgJson = {
  /**
   * sender address in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes from = 1;
   */
  from?: string;

  /**
   * contract address in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes to = 2;
   */
  to?: string;

  /**
   * solidity-spec abi encoded bytes
   *
   * @generated from field: bytes data = 3;
   */
  data?: string;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.CallMsg.
 * Use `create(CallMsgSchema)` to create a new message.
 */
export const CallMsgSchema: GenMessage<CallMsg, {jsonType: CallMsgJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 7);

/**
 * represents evm-style filter query
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.FilterQuery
 */
export type FilterQuery = Message<"capabilities.blockchain.evm.v1alpha.FilterQuery"> & {
  /**
   * exact block (cant use from/to), in [32]byte fix-sized array format
   *
   * @generated from field: bytes block_hash = 1;
   */
  blockHash: Uint8Array;

  /**
   * start block range
   *
   * @generated from field: values.v1.BigInt from_block = 2;
   */
  fromBlock?: BigInt;

  /**
   * end block range
   *
   * @generated from field: values.v1.BigInt to_block = 3;
   */
  toBlock?: BigInt;

  /**
   * contract(s) to filter logs from in evm address [20]byte fix-sized array format
   *
   * @generated from field: repeated bytes addresses = 4;
   */
  addresses: Uint8Array[];

  /**
   * filter log by event signature and indexed args
   *
   * @generated from field: repeated capabilities.blockchain.evm.v1alpha.Topics topics = 5;
   */
  topics: Topics[];
};

/**
 * represents evm-style filter query
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.FilterQuery
 */
export type FilterQueryJson = {
  /**
   * exact block (cant use from/to), in [32]byte fix-sized array format
   *
   * @generated from field: bytes block_hash = 1;
   */
  blockHash?: string;

  /**
   * start block range
   *
   * @generated from field: values.v1.BigInt from_block = 2;
   */
  fromBlock?: BigIntJson;

  /**
   * end block range
   *
   * @generated from field: values.v1.BigInt to_block = 3;
   */
  toBlock?: BigIntJson;

  /**
   * contract(s) to filter logs from in evm address [20]byte fix-sized array format
   *
   * @generated from field: repeated bytes addresses = 4;
   */
  addresses?: string[];

  /**
   * filter log by event signature and indexed args
   *
   * @generated from field: repeated capabilities.blockchain.evm.v1alpha.Topics topics = 5;
   */
  topics?: TopicsJson[];
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.FilterQuery.
 * Use `create(FilterQuerySchema)` to create a new message.
 */
export const FilterQuerySchema: GenMessage<FilterQuery, {jsonType: FilterQueryJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 8);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.Topics
 */
export type Topics = Message<"capabilities.blockchain.evm.v1alpha.Topics"> & {
  /**
   * in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes topic = 1;
   */
  topic: Uint8Array[];
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.Topics
 */
export type TopicsJson = {
  /**
   * in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes topic = 1;
   */
  topic?: string[];
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.Topics.
 * Use `create(TopicsSchema)` to create a new message.
 */
export const TopicsSchema: GenMessage<Topics, {jsonType: TopicsJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 9);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.BalanceAtRequest
 */
export type BalanceAtRequest = Message<"capabilities.blockchain.evm.v1alpha.BalanceAtRequest"> & {
  /**
   * in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes account = 1;
   */
  account: Uint8Array;

  /**
   * @generated from field: values.v1.BigInt block_number = 2;
   */
  blockNumber?: BigInt;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.BalanceAtRequest
 */
export type BalanceAtRequestJson = {
  /**
   * in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes account = 1;
   */
  account?: string;

  /**
   * @generated from field: values.v1.BigInt block_number = 2;
   */
  blockNumber?: BigIntJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.BalanceAtRequest.
 * Use `create(BalanceAtRequestSchema)` to create a new message.
 */
export const BalanceAtRequestSchema: GenMessage<BalanceAtRequest, {jsonType: BalanceAtRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 10);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.BalanceAtReply
 */
export type BalanceAtReply = Message<"capabilities.blockchain.evm.v1alpha.BalanceAtReply"> & {
  /**
   * Balance of the account in wei (10^-18 eth)
   *
   * @generated from field: values.v1.BigInt balance = 1;
   */
  balance?: BigInt;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.BalanceAtReply
 */
export type BalanceAtReplyJson = {
  /**
   * Balance of the account in wei (10^-18 eth)
   *
   * @generated from field: values.v1.BigInt balance = 1;
   */
  balance?: BigIntJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.BalanceAtReply.
 * Use `create(BalanceAtReplySchema)` to create a new message.
 */
export const BalanceAtReplySchema: GenMessage<BalanceAtReply, {jsonType: BalanceAtReplyJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 11);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.EstimateGasRequest
 */
export type EstimateGasRequest = Message<"capabilities.blockchain.evm.v1alpha.EstimateGasRequest"> & {
  /**
   * simulates tx execution returns approximate amount of gas units needed
   *
   * @generated from field: capabilities.blockchain.evm.v1alpha.CallMsg msg = 1;
   */
  msg?: CallMsg;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.EstimateGasRequest
 */
export type EstimateGasRequestJson = {
  /**
   * simulates tx execution returns approximate amount of gas units needed
   *
   * @generated from field: capabilities.blockchain.evm.v1alpha.CallMsg msg = 1;
   */
  msg?: CallMsgJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.EstimateGasRequest.
 * Use `create(EstimateGasRequestSchema)` to create a new message.
 */
export const EstimateGasRequestSchema: GenMessage<EstimateGasRequest, {jsonType: EstimateGasRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 12);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.EstimateGasReply
 */
export type EstimateGasReply = Message<"capabilities.blockchain.evm.v1alpha.EstimateGasReply"> & {
  /**
   * estimated amount of gas in gas units, needed for tx execution
   *
   * @generated from field: uint64 gas = 1 [jstype = JS_STRING];
   */
  gas: string;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.EstimateGasReply
 */
export type EstimateGasReplyJson = {
  /**
   * estimated amount of gas in gas units, needed for tx execution
   *
   * @generated from field: uint64 gas = 1 [jstype = JS_STRING];
   */
  gas?: string;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.EstimateGasReply.
 * Use `create(EstimateGasReplySchema)` to create a new message.
 */
export const EstimateGasReplySchema: GenMessage<EstimateGasReply, {jsonType: EstimateGasReplyJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 13);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.GetTransactionByHashRequest
 */
export type GetTransactionByHashRequest = Message<"capabilities.blockchain.evm.v1alpha.GetTransactionByHashRequest"> & {
  /**
   * in [32]byte fix-sized array format
   *
   * @generated from field: bytes hash = 1;
   */
  hash: Uint8Array;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.GetTransactionByHashRequest
 */
export type GetTransactionByHashRequestJson = {
  /**
   * in [32]byte fix-sized array format
   *
   * @generated from field: bytes hash = 1;
   */
  hash?: string;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.GetTransactionByHashRequest.
 * Use `create(GetTransactionByHashRequestSchema)` to create a new message.
 */
export const GetTransactionByHashRequestSchema: GenMessage<GetTransactionByHashRequest, {jsonType: GetTransactionByHashRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 14);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.GetTransactionByHashReply
 */
export type GetTransactionByHashReply = Message<"capabilities.blockchain.evm.v1alpha.GetTransactionByHashReply"> & {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.Transaction transaction = 1;
   */
  transaction?: Transaction;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.GetTransactionByHashReply
 */
export type GetTransactionByHashReplyJson = {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.Transaction transaction = 1;
   */
  transaction?: TransactionJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.GetTransactionByHashReply.
 * Use `create(GetTransactionByHashReplySchema)` to create a new message.
 */
export const GetTransactionByHashReplySchema: GenMessage<GetTransactionByHashReply, {jsonType: GetTransactionByHashReplyJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 15);

/**
 * represents evm-style transaction
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.Transaction
 */
export type Transaction = Message<"capabilities.blockchain.evm.v1alpha.Transaction"> & {
  /**
   * number of txs sent from sender
   *
   * @generated from field: uint64 nonce = 1 [jstype = JS_STRING];
   */
  nonce: string;

  /**
   * max gas allowed per execution (in gas units)
   *
   * @generated from field: uint64 gas = 2 [jstype = JS_STRING];
   */
  gas: string;

  /**
   * recipient address in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes to = 3;
   */
  to: Uint8Array;

  /**
   * solidity-spec abi encoded input data for function call payload
   *
   * @generated from field: bytes data = 4;
   */
  data: Uint8Array;

  /**
   * transaction hash, in [32]byte fix-sized array format
   *
   * @generated from field: bytes hash = 5;
   */
  hash: Uint8Array;

  /**
   * amount of eth sent in wei
   *
   * @generated from field: values.v1.BigInt value = 6;
   */
  value?: BigInt;

  /**
   * price for a single gas unit in wei
   *
   * @generated from field: values.v1.BigInt gas_price = 7;
   */
  gasPrice?: BigInt;
};

/**
 * represents evm-style transaction
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.Transaction
 */
export type TransactionJson = {
  /**
   * number of txs sent from sender
   *
   * @generated from field: uint64 nonce = 1 [jstype = JS_STRING];
   */
  nonce?: string;

  /**
   * max gas allowed per execution (in gas units)
   *
   * @generated from field: uint64 gas = 2 [jstype = JS_STRING];
   */
  gas?: string;

  /**
   * recipient address in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes to = 3;
   */
  to?: string;

  /**
   * solidity-spec abi encoded input data for function call payload
   *
   * @generated from field: bytes data = 4;
   */
  data?: string;

  /**
   * transaction hash, in [32]byte fix-sized array format
   *
   * @generated from field: bytes hash = 5;
   */
  hash?: string;

  /**
   * amount of eth sent in wei
   *
   * @generated from field: values.v1.BigInt value = 6;
   */
  value?: BigIntJson;

  /**
   * price for a single gas unit in wei
   *
   * @generated from field: values.v1.BigInt gas_price = 7;
   */
  gasPrice?: BigIntJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.Transaction.
 * Use `create(TransactionSchema)` to create a new message.
 */
export const TransactionSchema: GenMessage<Transaction, {jsonType: TransactionJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 16);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.GetTransactionReceiptRequest
 */
export type GetTransactionReceiptRequest = Message<"capabilities.blockchain.evm.v1alpha.GetTransactionReceiptRequest"> & {
  /**
   * in [32]byte fix-sized array format
   *
   * @generated from field: bytes hash = 1;
   */
  hash: Uint8Array;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.GetTransactionReceiptRequest
 */
export type GetTransactionReceiptRequestJson = {
  /**
   * in [32]byte fix-sized array format
   *
   * @generated from field: bytes hash = 1;
   */
  hash?: string;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.GetTransactionReceiptRequest.
 * Use `create(GetTransactionReceiptRequestSchema)` to create a new message.
 */
export const GetTransactionReceiptRequestSchema: GenMessage<GetTransactionReceiptRequest, {jsonType: GetTransactionReceiptRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 17);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.GetTransactionReceiptReply
 */
export type GetTransactionReceiptReply = Message<"capabilities.blockchain.evm.v1alpha.GetTransactionReceiptReply"> & {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.Receipt receipt = 1;
   */
  receipt?: Receipt;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.GetTransactionReceiptReply
 */
export type GetTransactionReceiptReplyJson = {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.Receipt receipt = 1;
   */
  receipt?: ReceiptJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.GetTransactionReceiptReply.
 * Use `create(GetTransactionReceiptReplySchema)` to create a new message.
 */
export const GetTransactionReceiptReplySchema: GenMessage<GetTransactionReceiptReply, {jsonType: GetTransactionReceiptReplyJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 18);

/**
 * represents evm-style receipt
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.Receipt
 */
export type Receipt = Message<"capabilities.blockchain.evm.v1alpha.Receipt"> & {
  /**
   * 1 for success 0 for failure
   *
   * @generated from field: uint64 status = 1 [jstype = JS_STRING];
   */
  status: string;

  /**
   * gas used by this transaction (in gas units)
   *
   * @generated from field: uint64 gas_used = 2 [jstype = JS_STRING];
   */
  gasUsed: string;

  /**
   * index of the transaction inside of the block
   *
   * @generated from field: uint64 tx_index = 3 [jstype = JS_STRING];
   */
  txIndex: string;

  /**
   * block hash containing the transaction
   *
   * @generated from field: bytes block_hash = 4;
   */
  blockHash: Uint8Array;

  /**
   * logs emitted by this transaction
   *
   * @generated from field: repeated capabilities.blockchain.evm.v1alpha.Log logs = 6;
   */
  logs: Log[];

  /**
   * hash of the transaction this receipt is for, in [32]byte fix-sized array format
   *
   * @generated from field: bytes tx_hash = 7;
   */
  txHash: Uint8Array;

  /**
   * actual gas price paid in wei (include after EIP-1559)
   *
   * @generated from field: values.v1.BigInt effective_gas_price = 8;
   */
  effectiveGasPrice?: BigInt;

  /**
   * block number containing the transaction
   *
   * @generated from field: values.v1.BigInt block_number = 9;
   */
  blockNumber?: BigInt;

  /**
   * address of the contract if this transaction created one in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes contract_address = 10;
   */
  contractAddress: Uint8Array;
};

/**
 * represents evm-style receipt
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.Receipt
 */
export type ReceiptJson = {
  /**
   * 1 for success 0 for failure
   *
   * @generated from field: uint64 status = 1 [jstype = JS_STRING];
   */
  status?: string;

  /**
   * gas used by this transaction (in gas units)
   *
   * @generated from field: uint64 gas_used = 2 [jstype = JS_STRING];
   */
  gasUsed?: string;

  /**
   * index of the transaction inside of the block
   *
   * @generated from field: uint64 tx_index = 3 [jstype = JS_STRING];
   */
  txIndex?: string;

  /**
   * block hash containing the transaction
   *
   * @generated from field: bytes block_hash = 4;
   */
  blockHash?: string;

  /**
   * logs emitted by this transaction
   *
   * @generated from field: repeated capabilities.blockchain.evm.v1alpha.Log logs = 6;
   */
  logs?: LogJson[];

  /**
   * hash of the transaction this receipt is for, in [32]byte fix-sized array format
   *
   * @generated from field: bytes tx_hash = 7;
   */
  txHash?: string;

  /**
   * actual gas price paid in wei (include after EIP-1559)
   *
   * @generated from field: values.v1.BigInt effective_gas_price = 8;
   */
  effectiveGasPrice?: BigIntJson;

  /**
   * block number containing the transaction
   *
   * @generated from field: values.v1.BigInt block_number = 9;
   */
  blockNumber?: BigIntJson;

  /**
   * address of the contract if this transaction created one in evm address [20]byte fix-sized array format
   *
   * @generated from field: bytes contract_address = 10;
   */
  contractAddress?: string;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.Receipt.
 * Use `create(ReceiptSchema)` to create a new message.
 */
export const ReceiptSchema: GenMessage<Receipt, {jsonType: ReceiptJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 19);

/**
 * ----- Request/Reply Wrappers -----
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.HeaderByNumberRequest
 */
export type HeaderByNumberRequest = Message<"capabilities.blockchain.evm.v1alpha.HeaderByNumberRequest"> & {
  /**
   * @generated from field: values.v1.BigInt block_number = 1;
   */
  blockNumber?: BigInt;
};

/**
 * ----- Request/Reply Wrappers -----
 *
 * @generated from message capabilities.blockchain.evm.v1alpha.HeaderByNumberRequest
 */
export type HeaderByNumberRequestJson = {
  /**
   * @generated from field: values.v1.BigInt block_number = 1;
   */
  blockNumber?: BigIntJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.HeaderByNumberRequest.
 * Use `create(HeaderByNumberRequestSchema)` to create a new message.
 */
export const HeaderByNumberRequestSchema: GenMessage<HeaderByNumberRequest, {jsonType: HeaderByNumberRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 20);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.HeaderByNumberReply
 */
export type HeaderByNumberReply = Message<"capabilities.blockchain.evm.v1alpha.HeaderByNumberReply"> & {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.Header header = 1;
   */
  header?: Header;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.HeaderByNumberReply
 */
export type HeaderByNumberReplyJson = {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.Header header = 1;
   */
  header?: HeaderJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.HeaderByNumberReply.
 * Use `create(HeaderByNumberReplySchema)` to create a new message.
 */
export const HeaderByNumberReplySchema: GenMessage<HeaderByNumberReply, {jsonType: HeaderByNumberReplyJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 21);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.Header
 */
export type Header = Message<"capabilities.blockchain.evm.v1alpha.Header"> & {
  /**
   * unix timestamp
   *
   * @generated from field: uint64 timestamp = 1 [jstype = JS_STRING];
   */
  timestamp: string;

  /**
   * @generated from field: values.v1.BigInt block_number = 2;
   */
  blockNumber?: BigInt;

  /**
   * in [32]byte fix-sized array format
   *
   * @generated from field: bytes hash = 3;
   */
  hash: Uint8Array;

  /**
   * in [32]byte fix-sized array format
   *
   * @generated from field: bytes parent_hash = 4;
   */
  parentHash: Uint8Array;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.Header
 */
export type HeaderJson = {
  /**
   * unix timestamp
   *
   * @generated from field: uint64 timestamp = 1 [jstype = JS_STRING];
   */
  timestamp?: string;

  /**
   * @generated from field: values.v1.BigInt block_number = 2;
   */
  blockNumber?: BigIntJson;

  /**
   * in [32]byte fix-sized array format
   *
   * @generated from field: bytes hash = 3;
   */
  hash?: string;

  /**
   * in [32]byte fix-sized array format
   *
   * @generated from field: bytes parent_hash = 4;
   */
  parentHash?: string;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.Header.
 * Use `create(HeaderSchema)` to create a new message.
 */
export const HeaderSchema: GenMessage<Header, {jsonType: HeaderJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 22);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.RegisterLogTrackingRequest
 */
export type RegisterLogTrackingRequest = Message<"capabilities.blockchain.evm.v1alpha.RegisterLogTrackingRequest"> & {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.LPFilter filter = 1;
   */
  filter?: LPFilter;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.RegisterLogTrackingRequest
 */
export type RegisterLogTrackingRequestJson = {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.LPFilter filter = 1;
   */
  filter?: LPFilterJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.RegisterLogTrackingRequest.
 * Use `create(RegisterLogTrackingRequestSchema)` to create a new message.
 */
export const RegisterLogTrackingRequestSchema: GenMessage<RegisterLogTrackingRequest, {jsonType: RegisterLogTrackingRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 23);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.LPFilter
 */
export type LPFilter = Message<"capabilities.blockchain.evm.v1alpha.LPFilter"> & {
  /**
   * maximum number of logs to retain ( 0 = unlimited )
   *
   * @generated from field: uint64 max_logs_kept = 1 [jstype = JS_STRING];
   */
  maxLogsKept: string;

  /**
   * maximum amount of time to retain logs in seconds
   *
   * @generated from field: int64 retention_time = 2 [jstype = JS_STRING];
   */
  retentionTime: string;

  /**
   * rate limit ( maximum # of logs per block, 0 = unlimited )
   *
   * @generated from field: uint64 logs_per_block = 3 [jstype = JS_STRING];
   */
  logsPerBlock: string;

  /**
   * filter name, has to persist for removing filter
   *
   * @generated from field: string name = 4;
   */
  name: string;

  /**
   * list of addresses to include in evm address [20]byte fix-sized array format
   *
   * @generated from field: repeated bytes addresses = 5;
   */
  addresses: Uint8Array[];

  /**
   * list of possible signatures (aka topic1), in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes event_sigs = 6;
   */
  eventSigs: Uint8Array[];

  /**
   * list of possible values for topic2, in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes topic2 = 7;
   */
  topic2: Uint8Array[];

  /**
   * list of possible values for topic3, in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes topic3 = 8;
   */
  topic3: Uint8Array[];

  /**
   * list of possible values for topic4, in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes topic4 = 9;
   */
  topic4: Uint8Array[];
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.LPFilter
 */
export type LPFilterJson = {
  /**
   * maximum number of logs to retain ( 0 = unlimited )
   *
   * @generated from field: uint64 max_logs_kept = 1 [jstype = JS_STRING];
   */
  maxLogsKept?: string;

  /**
   * maximum amount of time to retain logs in seconds
   *
   * @generated from field: int64 retention_time = 2 [jstype = JS_STRING];
   */
  retentionTime?: string;

  /**
   * rate limit ( maximum # of logs per block, 0 = unlimited )
   *
   * @generated from field: uint64 logs_per_block = 3 [jstype = JS_STRING];
   */
  logsPerBlock?: string;

  /**
   * filter name, has to persist for removing filter
   *
   * @generated from field: string name = 4;
   */
  name?: string;

  /**
   * list of addresses to include in evm address [20]byte fix-sized array format
   *
   * @generated from field: repeated bytes addresses = 5;
   */
  addresses?: string[];

  /**
   * list of possible signatures (aka topic1), in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes event_sigs = 6;
   */
  eventSigs?: string[];

  /**
   * list of possible values for topic2, in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes topic2 = 7;
   */
  topic2?: string[];

  /**
   * list of possible values for topic3, in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes topic3 = 8;
   */
  topic3?: string[];

  /**
   * list of possible values for topic4, in [32]byte fix-sized array format
   *
   * @generated from field: repeated bytes topic4 = 9;
   */
  topic4?: string[];
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.LPFilter.
 * Use `create(LPFilterSchema)` to create a new message.
 */
export const LPFilterSchema: GenMessage<LPFilter, {jsonType: LPFilterJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 24);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.UnregisterLogTrackingRequest
 */
export type UnregisterLogTrackingRequest = Message<"capabilities.blockchain.evm.v1alpha.UnregisterLogTrackingRequest"> & {
  /**
   * @generated from field: string filter_name = 1;
   */
  filterName: string;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.UnregisterLogTrackingRequest
 */
export type UnregisterLogTrackingRequestJson = {
  /**
   * @generated from field: string filter_name = 1;
   */
  filterName?: string;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.UnregisterLogTrackingRequest.
 * Use `create(UnregisterLogTrackingRequestSchema)` to create a new message.
 */
export const UnregisterLogTrackingRequestSchema: GenMessage<UnregisterLogTrackingRequest, {jsonType: UnregisterLogTrackingRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 25);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.WriteReportRequest
 */
export type WriteReportRequest = Message<"capabilities.blockchain.evm.v1alpha.WriteReportRequest"> & {
  /**
   * @generated from field: bytes receiver = 1;
   */
  receiver: Uint8Array;

  /**
   * @generated from field: sdk.v1alpha.ReportResponse report = 2;
   */
  report?: ReportResponse;

  /**
   * @generated from field: optional capabilities.blockchain.evm.v1alpha.GasConfig gas_config = 3;
   */
  gasConfig?: GasConfig;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.WriteReportRequest
 */
export type WriteReportRequestJson = {
  /**
   * @generated from field: bytes receiver = 1;
   */
  receiver?: string;

  /**
   * @generated from field: sdk.v1alpha.ReportResponse report = 2;
   */
  report?: ReportResponseJson;

  /**
   * @generated from field: optional capabilities.blockchain.evm.v1alpha.GasConfig gas_config = 3;
   */
  gasConfig?: GasConfigJson;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.WriteReportRequest.
 * Use `create(WriteReportRequestSchema)` to create a new message.
 */
export const WriteReportRequestSchema: GenMessage<WriteReportRequest, {jsonType: WriteReportRequestJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 26);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.GasConfig
 */
export type GasConfig = Message<"capabilities.blockchain.evm.v1alpha.GasConfig"> & {
  /**
   * @generated from field: uint64 gas_limit = 1 [jstype = JS_STRING];
   */
  gasLimit: string;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.GasConfig
 */
export type GasConfigJson = {
  /**
   * @generated from field: uint64 gas_limit = 1 [jstype = JS_STRING];
   */
  gasLimit?: string;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.GasConfig.
 * Use `create(GasConfigSchema)` to create a new message.
 */
export const GasConfigSchema: GenMessage<GasConfig, {jsonType: GasConfigJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 27);

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.WriteReportReply
 */
export type WriteReportReply = Message<"capabilities.blockchain.evm.v1alpha.WriteReportReply"> & {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.TxStatus tx_status = 1;
   */
  txStatus: TxStatus;

  /**
   * @generated from field: optional capabilities.blockchain.evm.v1alpha.ReceiverContractExecutionStatus receiver_contract_execution_status = 2;
   */
  receiverContractExecutionStatus?: ReceiverContractExecutionStatus;

  /**
   * @generated from field: optional bytes tx_hash = 3;
   */
  txHash?: Uint8Array;

  /**
   * @generated from field: optional values.v1.BigInt transaction_fee = 4;
   */
  transactionFee?: BigInt;

  /**
   * @generated from field: optional string error_message = 5;
   */
  errorMessage?: string;
};

/**
 * @generated from message capabilities.blockchain.evm.v1alpha.WriteReportReply
 */
export type WriteReportReplyJson = {
  /**
   * @generated from field: capabilities.blockchain.evm.v1alpha.TxStatus tx_status = 1;
   */
  txStatus?: TxStatusJson;

  /**
   * @generated from field: optional capabilities.blockchain.evm.v1alpha.ReceiverContractExecutionStatus receiver_contract_execution_status = 2;
   */
  receiverContractExecutionStatus?: ReceiverContractExecutionStatusJson;

  /**
   * @generated from field: optional bytes tx_hash = 3;
   */
  txHash?: string;

  /**
   * @generated from field: optional values.v1.BigInt transaction_fee = 4;
   */
  transactionFee?: BigIntJson;

  /**
   * @generated from field: optional string error_message = 5;
   */
  errorMessage?: string;
};

/**
 * Describes the message capabilities.blockchain.evm.v1alpha.WriteReportReply.
 * Use `create(WriteReportReplySchema)` to create a new message.
 */
export const WriteReportReplySchema: GenMessage<WriteReportReply, {jsonType: WriteReportReplyJson}> = /*@__PURE__*/
  messageDesc(file_capabilities_blockchain_evm_v1alpha_client, 28);

/**
 * @generated from enum capabilities.blockchain.evm.v1alpha.ConfidenceLevel
 */
export enum ConfidenceLevel {
  /**
   * @generated from enum value: CONFIDENCE_LEVEL_SAFE = 0;
   */
  SAFE = 0,

  /**
   * @generated from enum value: CONFIDENCE_LEVEL_LATEST = 1;
   */
  LATEST = 1,

  /**
   * @generated from enum value: CONFIDENCE_LEVEL_FINALIZED = 2;
   */
  FINALIZED = 2,
}

/**
 * @generated from enum capabilities.blockchain.evm.v1alpha.ConfidenceLevel
 */
export type ConfidenceLevelJson = "CONFIDENCE_LEVEL_SAFE" | "CONFIDENCE_LEVEL_LATEST" | "CONFIDENCE_LEVEL_FINALIZED";

/**
 * Describes the enum capabilities.blockchain.evm.v1alpha.ConfidenceLevel.
 */
export const ConfidenceLevelSchema: GenEnum<ConfidenceLevel, ConfidenceLevelJson> = /*@__PURE__*/
  enumDesc(file_capabilities_blockchain_evm_v1alpha_client, 0);

/**
 * @generated from enum capabilities.blockchain.evm.v1alpha.ReceiverContractExecutionStatus
 */
export enum ReceiverContractExecutionStatus {
  /**
   * @generated from enum value: RECEIVER_CONTRACT_EXECUTION_STATUS_SUCCESS = 0;
   */
  SUCCESS = 0,

  /**
   * @generated from enum value: RECEIVER_CONTRACT_EXECUTION_STATUS_REVERTED = 1;
   */
  REVERTED = 1,
}

/**
 * @generated from enum capabilities.blockchain.evm.v1alpha.ReceiverContractExecutionStatus
 */
export type ReceiverContractExecutionStatusJson = "RECEIVER_CONTRACT_EXECUTION_STATUS_SUCCESS" | "RECEIVER_CONTRACT_EXECUTION_STATUS_REVERTED";

/**
 * Describes the enum capabilities.blockchain.evm.v1alpha.ReceiverContractExecutionStatus.
 */
export const ReceiverContractExecutionStatusSchema: GenEnum<ReceiverContractExecutionStatus, ReceiverContractExecutionStatusJson> = /*@__PURE__*/
  enumDesc(file_capabilities_blockchain_evm_v1alpha_client, 1);

/**
 * @generated from enum capabilities.blockchain.evm.v1alpha.TxStatus
 */
export enum TxStatus {
  /**
   * @generated from enum value: TX_STATUS_FATAL = 0;
   */
  FATAL = 0,

  /**
   * @generated from enum value: TX_STATUS_REVERTED = 1;
   */
  REVERTED = 1,

  /**
   * @generated from enum value: TX_STATUS_SUCCESS = 2;
   */
  SUCCESS = 2,
}

/**
 * @generated from enum capabilities.blockchain.evm.v1alpha.TxStatus
 */
export type TxStatusJson = "TX_STATUS_FATAL" | "TX_STATUS_REVERTED" | "TX_STATUS_SUCCESS";

/**
 * Describes the enum capabilities.blockchain.evm.v1alpha.TxStatus.
 */
export const TxStatusSchema: GenEnum<TxStatus, TxStatusJson> = /*@__PURE__*/
  enumDesc(file_capabilities_blockchain_evm_v1alpha_client, 2);

/**
 * @generated from service capabilities.blockchain.evm.v1alpha.Client
 */
export const Client: GenService<{
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.CallContract
   */
  callContract: {
    methodKind: "unary";
    input: typeof CallContractRequestSchema;
    output: typeof CallContractReplySchema;
  },
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.FilterLogs
   */
  filterLogs: {
    methodKind: "unary";
    input: typeof FilterLogsRequestSchema;
    output: typeof FilterLogsReplySchema;
  },
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.BalanceAt
   */
  balanceAt: {
    methodKind: "unary";
    input: typeof BalanceAtRequestSchema;
    output: typeof BalanceAtReplySchema;
  },
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.EstimateGas
   */
  estimateGas: {
    methodKind: "unary";
    input: typeof EstimateGasRequestSchema;
    output: typeof EstimateGasReplySchema;
  },
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.GetTransactionByHash
   */
  getTransactionByHash: {
    methodKind: "unary";
    input: typeof GetTransactionByHashRequestSchema;
    output: typeof GetTransactionByHashReplySchema;
  },
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.GetTransactionReceipt
   */
  getTransactionReceipt: {
    methodKind: "unary";
    input: typeof GetTransactionReceiptRequestSchema;
    output: typeof GetTransactionReceiptReplySchema;
  },
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.HeaderByNumber
   */
  headerByNumber: {
    methodKind: "unary";
    input: typeof HeaderByNumberRequestSchema;
    output: typeof HeaderByNumberReplySchema;
  },
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.RegisterLogTracking
   */
  registerLogTracking: {
    methodKind: "unary";
    input: typeof RegisterLogTrackingRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.UnregisterLogTracking
   */
  unregisterLogTracking: {
    methodKind: "unary";
    input: typeof UnregisterLogTrackingRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.LogTrigger
   */
  logTrigger: {
    methodKind: "server_streaming";
    input: typeof FilterLogTriggerRequestSchema;
    output: typeof LogSchema;
  },
  /**
   * @generated from rpc capabilities.blockchain.evm.v1alpha.Client.WriteReport
   */
  writeReport: {
    methodKind: "unary";
    input: typeof WriteReportRequestSchema;
    output: typeof WriteReportReplySchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_capabilities_blockchain_evm_v1alpha_client, 0);

