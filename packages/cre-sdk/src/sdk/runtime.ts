import type { Message } from '@bufbuild/protobuf'
import type { GenMessage } from '@bufbuild/protobuf/codegenv2'
import type { ReportRequestJson } from '@cre/generated/sdk/v1alpha/sdk_pb'
import type { ConsensusAggregation, PrimitiveTypes, UnwrapOptions } from '@cre/sdk/utils'
import type { SecretsProvider } from '.'
import type {
	Report,
	ReportRequest,
	ReportRequestParams,
} from './utils/capabilities/blockchain/report'

export type CallCapabilityParams<I extends Message, O extends Message> = {
	capabilityId: string
	method: string
	payload: I
	inputSchema: GenMessage<I>
	outputSchema: GenMessage<O>
}

export type BaseRuntime<C> = {
	config: C

	// callCapability is meant to be called by generated code only.
	callCapability<I extends Message, O extends Message>(
		params: CallCapabilityParams<I, O>,
	): { result: () => O }

	now(): Date

	log(message: string): void
}

export type Runtime<C> = BaseRuntime<C> &
	SecretsProvider & {
		runInNodeMode<TArgs extends unknown[], TOutput>(
			fn: (nodeRuntime: NodeRuntime<C>, ...args: TArgs) => TOutput,
			consensusAggregation: ConsensusAggregation<TOutput, true>,
			unwrapOptions?: TOutput extends PrimitiveTypes ? never : UnwrapOptions<TOutput>,
		): (...args: TArgs) => { result: () => TOutput }

		/**
		 * Generate a cryptographically signed report for the given payload.
		 *
		 * Reports are generated by the DON using consensus and contain F+1 signatures.
		 * They can be verified on-chain by forwarder contracts or off-chain by validators.
		 *
		 * @param request - Report request containing encoded payload and signing parameters.
		 *                  Can be a ReportRequest protobuf, JSON, or simplified params object.
		 *                  When using params, defaults to: encoderName='evm', signingAlgo='ecdsa', hashingAlgo='keccak256'
		 * @returns Promise-like object with result() method that returns the signed Report
		 *
		 * @example
		 * ```typescript
		 * // Minimal usage with defaults (evm, ecdsa, keccak256)
		 * const report = runtime.generateReport({
		 *   encodedPayload: hexToBase64(callData),
		 * }).result()
		 *
		 * // Full explicit configuration
		 * const report = runtime.generateReport({
		 *   encodedPayload: hexToBase64(callData),
		 *   encoderName: "evm",
		 *   signingAlgo: "ecdsa",
		 *   hashingAlgo: "keccak256",
		 * }).result()
		 * ```
		 */
		generateReport(request: ReportRequest | ReportRequestJson | ReportRequestParams): {
			result: () => Report
		}
	}

export type NodeRuntime<C> = BaseRuntime<C> & {
	readonly _isNodeRuntime: true
}
