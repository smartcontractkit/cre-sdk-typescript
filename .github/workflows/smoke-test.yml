name: Smoke Test
permissions:
  contents: read
  # optional but nice if you later want to react/post: pull-requests: write, issues: write

on:
  pull_request:
    branches: [main]
  issue_comment:
    types: [created] # run when a new comment is added

jobs:
  smoke-test:
    runs-on: ubuntu-latest

    # Run for normal PRs, OR when a PR comment contains '#smoke-test'
    if: >
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' &&
       github.event.issue.pull_request != null &&
       contains(github.event.comment.body, '#smoke-test'))

    steps:
      # Checkout for regular PR trigger
      - name: Checkout code (pull_request)
        if: github.event_name == 'pull_request'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      # Checkout for comment trigger: use the PR head ref
      - name: Checkout code (issue_comment on PR)
        if: github.event_name == 'issue_comment'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
          # This checks out the PR head SHA for PR number in the comment event
          ref: refs/pull/${{ github.event.issue.number }}/head

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make zsh curl libclang-dev git build-essential

      - name: Install asdf and toolchain from .tool-versions
        run: |
          # Install asdf
          git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.14.0

          # Make asdf available to subsequent steps without re-sourcing
          echo "$HOME/.asdf/bin" >> $GITHUB_PATH
          echo "$HOME/.asdf/shims" >> $GITHUB_PATH

          # Init asdf
          source ~/.asdf/asdf.sh

          # Add plugins required for the project
          asdf plugin add bun
          asdf plugin add golang
          asdf plugin add rust
          asdf plugin add nodejs

          # Install all versions pinned in .tool-versions
          asdf install
          asdf reshim

          # Add Rust target for WASM (asdf-rust uses rustup under the hood)
          rustup target add wasm32-wasip1

      - name: Install dependencies
        run: bun install

      - name: Run full checks
        run: bun full-checks

      - name: Download and install cre-cli (ubuntu-latest)
        env:
          CRE_CLI_TAG: v0.6.1-alpha.0
        run: |
          set -euo pipefail

          # Map runner arch to release naming
          case "$(uname -m)" in
            x86_64|amd64)  ARCH=amd64 ;;
            aarch64|arm64) ARCH=arm64 ;;
            *) echo "Unsupported arch: $(uname -m)"; exit 1 ;;
          esac

          ASSET="cre_linux_${ARCH}.tar.gz"
          BASE_URL="https://github.com/smartcontractkit/cre-cli/releases/download/${CRE_CLI_TAG}"

          echo "Downloading ${ASSET} and checksums.txt from ${CRE_CLI_TAG}..."
          curl -fL --retry 3 -o "${ASSET}"        "${BASE_URL}/${ASSET}"
          curl -fL --retry 3 -o checksums.txt     "${BASE_URL}/checksums.txt"

          echo "Verifying checksum..."
          # checksums.txt contains lines like: "<sha256>  <filename>"
          grep "  ${ASSET}$" checksums.txt > sha_line.txt
          if [ ! -s sha_line.txt ]; then
            echo "No checksum entry for ${ASSET}"; exit 1
          fi
          sha256sum -c sha_line.txt

          echo "Extracting..."
          tar -xzf "${ASSET}"

          # Find the 'cre' binary (tarball is expected to contain it at top-level)
          BIN="./cre"
          if [ ! -f "$BIN" ]; then
            BIN="$(tar -tzf "${ASSET}" | grep -E '/?cre$' | head -n1 || true)"
            [ -z "$BIN" ] && { echo "Could not locate 'cre' in archive"; exit 1; }
            tar -xzf "${ASSET}" "$BIN"
          fi

          echo "Installing to /usr/local/bin..."
          sudo mv ${BIN:-./cre} /usr/local/bin/cre
          sudo chmod +x /usr/local/bin/cre

          echo "Installed version:"
          cre --version

      - name: Setup CRE SDK examples
        run: |
          cd packages/cre-sdk-examples
          bunx cre-setup

      - name: Simulate Hello World workflow
        run: |
          cd packages/cre-sdk-examples
          cre workflow simulate ./src/workflows/hello-world --target local-simulation

      - name: Simulate Http Fetch workflow
        run: |
          cd packages/cre-sdk-examples
          cre workflow simulate ./src/workflows/http-fetch --target local-simulation

      - name: Simulate On Chain Read workflow
        run: |
          cd packages/cre-sdk-examples
          cre workflow simulate ./src/workflows/on-chain --target local-simulation

      - name: Simulate On Chain Write workflow
        run: |
          cd packages/cre-sdk-examples
          cre workflow simulate ./src/workflows/on-chain-write --target local-simulation

      - name: Simulate Proof of Reserve workflow
        run: |
          cd packages/cre-sdk-examples
          cre workflow simulate ./src/workflows/proof-of-reserve --target local-simulation --secrets ../../../secrets.yaml
