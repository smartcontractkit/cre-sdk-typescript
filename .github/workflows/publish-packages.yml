name: Publish Packages

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: false
        type: string
      dry_run:
        description: 'Run in dry-run mode (do not actually publish)'
        required: false
        default: false
        type: boolean

env:
  BUN_VERSION: '1.87.0'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # for npm provenance
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Update version if specified
        if: ${{ github.event.inputs.version }}
        run: |
          echo "Updating version to ${{ github.event.inputs.version }}"
          bun pm version ${{ github.event.inputs.version }}
          
          # Update platform-specific package versions
          for folder in pkg/cli/*/; do
            if [ -d "$folder" ] && [ -f "$folder/package.json" ]; then
              echo "Updating version in $folder"
              (cd "$folder" && bun pm version ${{ github.event.inputs.version }})
            fi
          done

      - name: Build packages
        run: |
          echo "Running build-npm-tar.sh..."
          bash build-npm-tar.sh

      - name: List generated packages
        run: |
          echo "Generated packages:"
          ls -la pkg/*.tgz

      - name: Setup npm authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "access=public" >> ~/.npmrc

      - name: Verify npm authentication
        run: bun pm whoami

      - name: Publish main package
        run: |
          MAIN_PACKAGE=$(find pkg -name "*cre-sdk-*.tgz" | head -1)
          if [ -n "$MAIN_PACKAGE" ]; then
            echo "Publishing main package: $MAIN_PACKAGE"
            if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
              echo "DRY RUN: Would publish $MAIN_PACKAGE"
              bun publish "$MAIN_PACKAGE" --dry-run --access public
            else
              bun publish "$MAIN_PACKAGE" --access public
            fi
          else
            echo "Main package not found!"
            exit 1
          fi

      - name: Publish platform-specific packages
        run: |
          # Publish all platform-specific build packages
          for package in pkg/*cre-build-*.tgz; do
            if [ -f "$package" ]; then
              echo "Publishing platform package: $package"
              if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
                echo "DRY RUN: Would publish $package"
                bun publish "$package" --dry-run --access public
              else
                bun publish "$package" --access public
              fi
            fi
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: npm-packages
          path: pkg/*.tgz
          retention-days: 30

      - name: Create release summary
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          echo "## 📦 Published Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Main Package" >> $GITHUB_STEP_SUMMARY
          
          MAIN_PACKAGE=$(find pkg -name "*cre-sdk-*.tgz" | head -1 | xargs basename)
          echo "- 📋 \`@chainlink/cre-sdk\` from \`$MAIN_PACKAGE\`" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platform-Specific Packages" >> $GITHUB_STEP_SUMMARY
          
          for package in pkg/*cre-build-*.tgz; do
            if [ -f "$package" ]; then
              BASENAME=$(basename "$package")
              PACKAGE_NAME=$(echo "$BASENAME" | sed 's/chainlink-//' | sed 's/.tgz$//' | sed 's/-[0-9].*$//')
              echo "- 🖥️ \`@chainlink/$PACKAGE_NAME\` from \`$BASENAME\`" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Using npm" >> $GITHUB_STEP_SUMMARY
          echo "npm install @chainlink/cre-sdk" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Using bun" >> $GITHUB_STEP_SUMMARY
          echo "bun add @chainlink/cre-sdk" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  verify-packages:
    needs: build-and-publish
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Wait for package propagation
        run: sleep 60

      - name: Verify main package installation
        run: |
          echo "Verifying @chainlink/cre-sdk can be installed..."
          bun add @chainlink/cre-sdk --dry-run
          echo "✅ Main package verification successful"

      - name: Verify platform packages exist
        run: |
          echo "Verifying platform-specific packages..."
          platforms=("darwin-arm64" "darwin-x64" "linux-arm64" "linux-x64" "windows-x64")
          
          for platform in "${platforms[@]}"; do
            echo "Checking @chainlink/cre-build-$platform..."
            if bun pm view "@chainlink/cre-build-$platform" version >/dev/null 2>&1; then
              echo "✅ @chainlink/cre-build-$platform exists"
            else
              echo "❌ @chainlink/cre-build-$platform not found"
              exit 1
            fi
          done
