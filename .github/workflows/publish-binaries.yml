name: Publish Binary Packages
permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: false
        type: string
      dry_run:
        description: 'Run in dry-run mode (do not actually publish)'
        required: false
        default: false
        type: boolean
      platforms:
        description: 'Comma-separated list of platforms to publish (e.g., "darwin-arm64,linux-x64" or "all")'
        required: false
        default: 'all'
        type: string
  push:
    tags:
      - 'binaries-v*'
  release:
    types: [published]
    
env:
  BUN_VERSION: '1.2.21'

jobs:
  build-javy-sdk-plugin-darwin:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
      
      - name: Get the chainlink javy plugin
        run: bun run build:javy:plugin

      - name: Build Javy SDK plugin
        run: bun run build-bins.ts darwin-arm64

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # actions/upload-artifact@v4.5.0
        with:
          name: cre-ts-darwin-arm64
          path: |
            pkg/cli/darwin-arm64

  build-javy-sdk-plugin-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      
      - name: Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Get the chainlink javy plugin
        run: bun run build:javy:plugin
      
      - name: Build Javy SDK plugin
        run: bun run build-bins.ts linux-x64

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # actions/upload-artifact@v4.5.0
        with:
          name: cre-ts-linux-x64
          path: |
            pkg/cli/linux-x64


  build-and-publish-binaries:
    needs:
      - build-javy-sdk-plugin-darwin
      - build-javy-sdk-plugin-linux
    runs-on: ubuntu-latest
    outputs:
      selected_platforms: ${{ steps.platforms.outputs.selected_platforms }}
    permissions:
      contents: read
      id-token: write # for npm provenance
    environment: Publish
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Download Build Artifacts for darwin/arm64
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # actions/download-artifact@v4.1.8
        with:
          name: cre-ts-darwin-arm64
          path: ./pkg/cli/darwin_arm64

      - name: Download Build Artifacts for linux/x64
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # actions/download-artifact@v4.1.8
        with:
          name: cre-ts-linux-x64
          path: ./pkg/cli/linux_x64

      - name: Update platform package versions
        if: ${{ github.event.inputs.version }}
        run: |
          echo "Updating platform package versions to ${{ github.event.inputs.version }}"
          
          # Update platform-specific package versions
          for folder in pkg/cli/*/; do
            if [ -d "$folder" ] && [ -f "$folder/package.json" ]; then
              echo "Updating version in $folder"
              (cd "$folder" && bun pm version ${{ github.event.inputs.version }})
              echo "Version updated in $folder -> ${{ github.event.inputs.version }}"
            fi
          done


      - name: Build packages
        run: |
          echo "Running build-npm-tar.sh..."
          bash build-npm-tar.sh

      - name: Parse platform selection
        id: platforms
        run: |
          PLATFORMS_INPUT="${{ github.event.inputs.platforms || 'all' }}"
          
          if [ "$PLATFORMS_INPUT" = "all" ]; then
            SELECTED_PLATFORMS="darwin-arm64,darwin-x64,linux-arm64,linux-x64,windows-x64"
          else
            SELECTED_PLATFORMS="$PLATFORMS_INPUT"
          fi
          
          echo "selected_platforms=$SELECTED_PLATFORMS" >> $GITHUB_OUTPUT
          echo "Publishing platforms: $SELECTED_PLATFORMS"

      - name: List generated binary packages
        run: |
          echo "Generated binary packages:"
          ls -la ./pkg/*cre-ts-*.tgz

      - name: Verify npm authentication
        env:
          NPM_CONFIG_TOKEN: ${{ secrets. NPM_CRE_SDK_TYPESCRIPT }}
        run: bun pm whoami

      - name: Publish platform-specific packages
        env:
          NPM_CONFIG_TOKEN: ${{ secrets. NPM_CRE_SDK_TYPESCRIPT }}
        run: |
          SELECTED_PLATFORMS="${{ steps.platforms.outputs.selected_platforms }}"
          IFS=',' read -ra PLATFORM_ARRAY <<< "$SELECTED_PLATFORMS"
          
          echo "Publishing packages for platforms: ${PLATFORM_ARRAY[@]}"
          
          # Publish selected platform-specific build packages
          for package in pkg/*cre-ts-*.tgz; do
            if [ -f "$package" ]; then
              BASENAME=$(basename "$package")
              
              # Extract platform from filename (e.g., cre-ts-darwin-arm64-0.0.1.tgz -> darwin-arm64)
              PLATFORM=$(echo "$BASENAME" | sed 's/.*cre-ts-\(.*\)-[0-9].*/\1/')
              
              # Check if this platform should be published
              SHOULD_PUBLISH=false
              for selected_platform in "${PLATFORM_ARRAY[@]}"; do
                if [ "$PLATFORM" = "$selected_platform" ]; then
                  SHOULD_PUBLISH=true
                  break
                fi
              done
              
              if [ "$SHOULD_PUBLISH" = true ]; then
                echo "Publishing platform package: $package (platform: $PLATFORM)"
                if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
                  echo "DRY RUN: Would publish $package"
                  bun publish "$package" --dry-run --access public --verbose
                else
                  bun publish "$package" --access public --verbose
                  sleep 5
                fi
              else
                echo "Skipping $package (platform: $PLATFORM not in selection)"
              fi
            fi
          done

      - name: Upload binary packages artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-packages
          path: pkg/*cre-ts-*.tgz
          retention-days: 30

      - name: Create release summary
        if: ${{ !github.event.inputs.dry_run }}
        run: |
          echo "## üñ•Ô∏è Published Binary Packages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          SELECTED_PLATFORMS="${{ steps.platforms.outputs.selected_platforms }}"
          IFS=',' read -ra PLATFORM_ARRAY <<< "$SELECTED_PLATFORMS"
          
          for package in pkg/*cre-ts-*.tgz; do
            if [ -f "$package" ]; then
              BASENAME=$(basename "$package")
              PLATFORM=$(echo "$BASENAME" | sed 's/.*cre-ts-\(.*\)-[0-9].*/\1/')
              
              # Check if this platform was published
              for selected_platform in "${PLATFORM_ARRAY[@]}"; do
                if [ "$PLATFORM" = "$selected_platform" ]; then
                  PACKAGE_NAME=$(echo "$BASENAME" | sed 's/chainlink-//' | sed 's/.tgz$//' | sed 's/-[0-9].*$//')
                  echo "- üñ•Ô∏è \`@chainlink/$PACKAGE_NAME\` from \`$BASENAME\`" >> $GITHUB_STEP_SUMMARY
                  break
                fi
              done
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Platform-Specific Installation" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Install specific platform binary" >> $GITHUB_STEP_SUMMARY
          echo "npm install @chainlink/cre-ts-darwin-arm64  # for macOS ARM64" >> $GITHUB_STEP_SUMMARY
          echo "npm install @chainlink/cre-ts-linux-x64     # for Linux x64" >> $GITHUB_STEP_SUMMARY
          echo "# etc..." >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  verify-binary-packages:
    needs: build-and-publish-binaries
    runs-on: ubuntu-latest
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
      - name: Setup Bun
        uses: oven-sh/setup-bun@735343b667d3e6f658f44d0eca948eb6282f2b76 # v2.0.2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Wait for package propagation
        run: sleep 60

      - name: Verify published binary packages exist
        run: |
          echo "Verifying published binary packages..."
          
          SELECTED_PLATFORMS="${{ needs.build-and-publish-binaries.outputs.selected_platforms || 'darwin-arm64,darwin-x64,linux-arm64,linux-x64,windows-x64' }}"
          IFS=',' read -ra PLATFORM_ARRAY <<< "$SELECTED_PLATFORMS"
          
          for platform in "${PLATFORM_ARRAY[@]}"; do
            echo "Checking @chainlink/cre-ts-$platform..."
            if bun pm view "@chainlink/cre-ts-$platform" version >/dev/null 2>&1; then
              echo "‚úÖ @chainlink/cre-ts-$platform exists"
            else
              echo "‚ùå @chainlink/cre-ts-$platform not found"
              exit 1
            fi
          done